import moment from 'moment-timezone'

const menu = async (m, Matrix) => {
    //  Bot Prosess Time
    const uptime = process.uptime();
    const day = Math.floor(uptime / (24 * 3600)); // Calculate days
    const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
    const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
    const seconds = Math.floor(uptime % 60); // Calculate seconds

    //Uptime
    const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
    const runMessage = `*‚òÄÔ∏è ${day} Day*\n *üïê ${hours} Hour*\n *‚è∞ ${minutes} Minutes*\n *‚è±Ô∏è ${seconds} Seconds*\n`;

    const xtime = moment.tz("Asia/Colombo").format("HH:mm:ss");
    const xdate = moment.tz("Asia/Colombo").format("DD/MM/YYYY");
    const time2 = moment().tz("Asia/Colombo").format("HH:mm:ss");
    if (time2 < "23:59:00") {
        var pushwish = `Good Night üåå`;
    }
    if (time2 < "19:00:00") {
        var pushwish = `Good Evening üåÉ`;
    }
    if (time2 < "18:00:00") {
        var pushwish = `Good Evening üåÉ`;
    }
    if (time2 < "15:00:00") {
        var pushwish = `Good Afternoon üåÖ`;
    }
    if (time2 < "11:00:00") {
        var pushwish = `Good Morning üåÑ`;
    }
    if (time2 < "05:00:00") {
        var pushwish = `Good Morning üåÑ`;
    }

    if (m.body === ".menu") {
        const str = `
‚ï≠‚îÄ‚îÄ‚ïê‚ùÆ *TheMatrix-MD* ‚ùØ‚ïê‚îÄ‚îà‚Ä¢
‚îÇ Hi üëã  
‚ï∞‚Äì‚ùñ *${m.pushName}* 
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÑ‚îÑ‚îà‚Ä¢
‚îÇ‚úë *${pushwish}* üòÑ 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÉ 
‚ï≠‚îÄ‚îÄ‚ïê‚ùÆ *Bot Info* ‚ùØ‚ïê‚îÄ‚îà‚Ä¢
‚îÇ *Bot Name* : *TheMatrix-MD*
‚îÇ *Owner Name* : *Goutam Stark*
‚îÇ *Prefix* :  *[ . ]*
‚îÇ *Uptime* : *${hours}h ${minutes}m ${seconds}s*
‚îÇ *Mode* : *Public*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÉ 
‚ï≠‚îÄ‚îÄ‚ïê‚ùÆ *Users Info* ‚ùØ‚ïê‚îÄ‚îà‚Ä¢
‚îÇùó°ùóÆùó∫ùó≤ : *${m.pushName}*
‚îÇùó°ùòÇùó∫ùóØùó≤ùóø : @${m.sender.split('@')[0]} 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÉ 
‚ï≠‚îÄ‚îÄ‚ïê‚ùÆ *Date Time* ‚ùØ‚ïê‚îÄ‚îà‚Ä¢
‚îÇùóßùó∂m ùó≤ : *${xtime}*
‚îÇùóóùóÆùòÅùó≤ : *${xdate}*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÉ 
‚ï≠‚îÄ‚îÄ‚ïê‚ùÆ *COMMANDS* ‚ùØ‚ïê‚îÄ‚îà‚Ä¢
‚îÇ  ‚ï≠‚îÄ‚îÄ‚îà‚Ä¢
‚îÇ  ‚îÇ‚ûõ .Ping
‚îÇ  ‚îÇ‚ûõ .Menu
‚îÇ  ‚îÇ‚ûõ .Ai
‚îÇ  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¶Å
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÉ
   `;
        let fgg = {
            key: {
                fromMe: false,
                participant: `0@s.whatsapp.net`,
                remoteJid: "status@broadcast"
            },
            message: {
                contactMessage: {
                    displayName: `MATRIX-MD`,
                    vcard: `BEGIN:VCARD\nVERSION:3.0\nN:;a,;;;\nFN:'MATRIX'\nitem1.TEL;waid=${
                        m.sender.split("@")[0]
                    }:${
                        m.sender.split("@")[0]
                    }\nitem1.X-ABLabel:Ponsel\nEND:VCARD`
                }
            }
        };
        await Matrix.sendMessage(m.from, { text: str }, { quoted: fgg });
   }
};

export default menu;
